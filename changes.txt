Archivos a modificar:

1. src/supabase.js (nuevo archivo)
```javascript
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Funciones auxiliares para interactuar con Supabase
export const auth = {
  signIn: async (email, password) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })
    return { data, error }
  },

  signUp: async (email, password) => {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
    })
    return { data, error }
  },

  signOut: async () => {
    const { error } = await supabase.auth.signOut()
    return { error }
  },

  getSession: async () => {
    const { data: { session }, error } = await supabase.auth.getSession()
    return { session, error }
  }
}

export const songs = {
  getAll: async () => {
    const { data, error } = await supabase
      .from('songs')
      .select('*')
      .order('created_at', { ascending: false })
    return { data, error }
  },

  create: async (song) => {
    const { data, error } = await supabase
      .from('songs')
      .insert([song])
      .select()
    return { data, error }
  },

  update: async (id, updates) => {
    const { data, error } = await supabase
      .from('songs')
      .update(updates)
      .eq('id', id)
      .select()
    return { data, error }
  },

  delete: async (id) => {
    const { error } = await supabase
      .from('songs')
      .delete()
      .eq('id', id)
    return { error }
  }
}

export const setlists = {
  getAll: async () => {
    const { data, error } = await supabase
      .from('setlists')
      .select('*')
      .order('date', { ascending: false })
    return { data, error }
  },

  create: async (setlist) => {
    const { data, error } = await supabase
      .from('setlists')
      .insert([setlist])
      .select()
    return { data, error }
  },

  update: async (id, updates) => {
    const { data, error } = await supabase
      .from('setlists')
      .update(updates)
      .eq('id', id)
      .select()
    return { data, error }
  },

  delete: async (id) => {
    const { error } = await supabase
      .from('setlists')
      .delete()
      .eq('id', id)
    return { error }
  },

  addSongs: async (setlistId, songIds) => {
    const entries = songIds.map((songId, index) => ({
      setlist_id: setlistId,
      song_id: songId,
      order_number: index + 1
    }))

    const { data, error } = await supabase
      .from('setlist_songs')
      .insert(entries)
      .select()
    return { data, error }
  },

  getSongs: async (setlistId) => {
    const { data, error } = await supabase
      .from('setlist_songs')
      .select(`
        order_number,
        songs (*)
      `)
      .eq('setlist_id', setlistId)
      .order('order_number')
    return { data, error }
  }
}
```

2. package.json (agregar dependencia)
En la secci칩n "dependencies" agregar:
```json
"@supabase/supabase-js": "^2.39.7"
```

3. src/components/LoginModal.js (reemplazar contenido)
```javascript
import React, { useState } from 'react';
import { auth } from '../supabase';

const ADMIN_EMAIL = 'admin@gisetlist.com';

const LoginModal = ({ isOpen, onClose, onLogin }) => {
  const [email, setEmail] = useState(ADMIN_EMAIL);
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isRegistering, setIsRegistering] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      // Solo permitir el email de administrador
      if (email !== ADMIN_EMAIL) {
        throw new Error('Email no autorizado');
      }

      let response;
      if (isRegistering) {
        response = await auth.signUp({
          email,
          password,
        });
      } else {
        response = await auth.signIn(email, password);
      }

      if (response.error) throw response.error;
      
      onLogin(response.data);
      onClose();
    } catch (err) {
      setError(err.message);
      if (err.message.includes('Email not confirmed') || 
          err.message.includes('Invalid login credentials')) {
        setIsRegistering(true);
      }
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-[#1a1f2e] rounded-lg p-6 w-full max-w-md">
        <h2 className="text-2xl font-bold text-[#FBAE00] mb-6">
          {isRegistering ? 'Registro Inicial de Admin' : 'Iniciar Sesi칩n'}
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-gray-300 mb-2">Email</label>
            <input
              type="email"
              value={email}
              disabled={true}
              className="w-full p-2 rounded bg-gray-900 text-white border border-gray-700 focus:border-[#FBAE00] focus:outline-none opacity-50"
            />
          </div>
          
          <div>
            <label className="block text-gray-300 mb-2">Contrase침a</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full p-2 rounded bg-gray-900 text-white border border-gray-700 focus:border-[#FBAE00] focus:outline-none"
              required
              minLength={6}
            />
          </div>

          {error && (
            <div className="text-red-500 text-sm mt-2">
              {error}
            </div>
          )}

          <div className="flex justify-end space-x-4 mt-6">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-gray-300 hover:text-white"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={isLoading}
              className="px-4 py-2 bg-[#FBAE00] text-black rounded hover:bg-[#ffc03d] disabled:opacity-50"
            >
              {isLoading ? 'Cargando...' : isRegistering ? 'Registrar Admin' : 'Iniciar Sesi칩n'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default LoginModal;
``` 